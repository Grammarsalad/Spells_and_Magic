DEFINE_PATCH_FUNCTION MAKE_CANTRIP
  INT_VAR   type            = "0" // 0 = Innate, Spell menu, no failure, infinite casting
//                                // 1 = Innate, innate menu, no failure, infinite casting
//                          //TO DO: 3 = Mage/Priest Level 1, innate menu, no failure, infinite casting
//                          //TO DO: 4 = Mage/Priest Level 1, spell menu, no failure, infinite casting
  STR_VAR   level_text      = "Cantrip"  //Infinite cast: File name of spl (Really should be the spl in question, though exceptions are possible)
            spell_name      = "SAME"  //Spell name if not original

  BEGIN
  READ_LONG  0x64 abil_off ELSE 0
  READ_SHORT 0x68 abil_num ELSE 0

////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////type zero (0)
////////////////////////////////////////////////////////////////////////////////////////

PATCH_IF (type = 0) BEGIN //Type: 0: Innate spell but spell menu
//spell type
  WRITE_SHORT 0x1C 4                         // sets spell type to innate (4)
//level
  WRITE_LONG  0x34 1                         // sets spell level to 1 to avoid scripting issues
//location
  FOR (index = 0 ; index < abil_num ; ++index) BEGIN
    WRITE_SHORT (abil_off + 0x02 + (0x28 * index)) 2 //spell location: spell menu
  END
//no failure
   WRITE_LONG 0x0018 (THIS | 0x4000)       //No failure


//infinite casting
     PATCH_IF ("%spell_name%" STRING_COMPARE_CASE "SAME" != 0) BEGIN //
	PATCH_IF (~%SOURCE_SIZE%~ > ~0x71~) BEGIN
        READ_LONG 	0x64	ab_off			// Abilities Offset
	READ_SHORT	0x68	ab_num			// Number of Abilities
	READ_SHORT	0x6a	fx_off			// Effects Offset
	READ_SHORT	0x70	glob_fx			// Number of Global Effects
	SET	glob_add = 0

	INSERT_BYTES (fx_off) 0x30
	  WRITE_SHORT (fx_off) 171			// Give innate
	  WRITE_BYTE (fx_off + 0x2) 1			// Target Self
	  WRITE_BYTE (fx_off + 0x3) 1			// power
	  WRITE_LONG (fx_off + 0x8) 0			// Wizard
	  WRITE_LONG (fx_off + 0xc) 9			// perm
	  WRITE_BYTE (fx_off + 0x12) 100		// Probability 1
	  WRITE_ASCIIE (fx_off + 0x14) 	"%spell_name%"  // resource
	++glob_add

        INSERT_BYTES (fx_off) 0x30
	  WRITE_SHORT (fx_off) 172			// Remove spell
	  WRITE_BYTE (fx_off + 0x2) 1			// Target Self
	  WRITE_BYTE (fx_off + 0x3) 1			// power
	  WRITE_LONG (fx_off + 0x8) 0			// Wizard
	  WRITE_LONG (fx_off + 0xc) 9			// perm
	  WRITE_BYTE (fx_off + 0x12) 100		// Probability 1
	  WRITE_ASCIIE (fx_off + 0x14) "%spell_name%"	// resource
	++glob_add

//	INSERT_BYTES (fx_off) 0x30			//Second effect
//	  WRITE_etc...
//	++glob_add

	glob_fx += glob_add
	WRITE_SHORT 0x70 glob_fx			// Increment Number of Global Effects
	FOR (i = 0; i < ab_num; ++i) BEGIN		// Offset Effect Index for all Abilities
	  READ_SHORT (ab_off + i * 0x28 + 0x20) fx_idx
	  WRITE_SHORT (ab_off + i * 0x28 + 0x20) (fx_idx + glob_add)
	END
     END
     END ELSE //end of infinite casting without specification
     BEGIN
	PATCH_IF (~%SOURCE_SIZE%~ > ~0x71~) BEGIN
        READ_LONG 	0x64	ab_off			// Abilities Offset
	READ_SHORT	0x68	ab_num			// Number of Abilities
	READ_SHORT	0x6a	fx_off			// Effects Offset
	READ_SHORT	0x70	glob_fx			// Number of Global Effects
	SET	glob_add = 0

	INSERT_BYTES (fx_off) 0x30
	  WRITE_SHORT (fx_off) 171			// Give innate
	  WRITE_BYTE (fx_off + 0x2) 1			// Target Self
	  WRITE_BYTE (fx_off + 0x3) 1			// power
	  WRITE_LONG (fx_off + 0x8) 0			// Wizard
	  WRITE_LONG (fx_off + 0xc) 9			// perm
	  WRITE_BYTE (fx_off + 0x12) 100		// Probability 1
	  WRITE_ASCIIE (fx_off + 0x14) "%SOURCE_RES%"	// resource
	++glob_add

        INSERT_BYTES (fx_off) 0x30
	  WRITE_SHORT (fx_off) 172			// Remove spell
	  WRITE_BYTE (fx_off + 0x2) 1			// Target Self
	  WRITE_BYTE (fx_off + 0x3) 1			// power
	  WRITE_LONG (fx_off + 0x8) 0			// Wizard
	  WRITE_LONG (fx_off + 0xc) 9			// perm
	  WRITE_BYTE (fx_off + 0x12) 100		// Probability 1
	  WRITE_ASCIIE (fx_off + 0x14) "%SOURCE_RES%"	// resource
	++glob_add

//	INSERT_BYTES (fx_off) 0x30			//Second effect
//	  WRITE_etc...
//	++glob_add

	glob_fx += glob_add
	WRITE_SHORT 0x70 glob_fx			// Increment Number of Global Effects
	FOR (i = 0; i < ab_num; ++i) BEGIN		// Offset Effect Index for all Abilities
	  READ_SHORT (ab_off + i * 0x28 + 0x20) fx_idx
	  WRITE_SHORT (ab_off + i * 0x28 + 0x20) (fx_idx + glob_add)
	END
      END
     END

  READ_LONG 0x50 "valid"
  PATCH_IF ("%level_text%" STRING_COMPARE_CASE "SAME" != 0) BEGIN
  PATCH_IF (%valid% >= 0) BEGIN // verify desc is valid
  READ_STRREF 0x50 ~desc~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~Level: Cantrip~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: Orison~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 1~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 2~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 3~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 4~ ~Level: %level_text%~        //replacing old with new
	REPLACE_TEXTUALLY ~Level: 5~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 6~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 7~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 8~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 9~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 10~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: Quest~ ~Level: %level_text%~        //replacing old with new
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
  END  //
  END
END //end type 0

////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////type one (1)
////////////////////////////////////////////////////////////////////////////////////////
PATCH_IF (type = 1) BEGIN //Type: 1: Innate spell and menu
//spell type
  WRITE_SHORT 0x1C 4                         // sets spell type to innate (4)
//level
  WRITE_LONG  0x34 1                         // sets spell level to 1 to avoid scripting issues
//location
  FOR (index = 0 ; index < abil_num ; ++index) BEGIN
    WRITE_SHORT (abil_off + 0x02 + (0x28 * index)) 4 //spell location: innate menu
  END
//no failure
   WRITE_LONG 0x0018 (THIS | 0x4000)       //No failure


//infinite casting
     PATCH_IF ("%spell_name%" STRING_COMPARE_CASE "SAME" != 0) BEGIN //
	PATCH_IF (~%SOURCE_SIZE%~ > ~0x71~) BEGIN
        READ_LONG 	0x64	ab_off			// Abilities Offset
	READ_SHORT	0x68	ab_num			// Number of Abilities
	READ_SHORT	0x6a	fx_off			// Effects Offset
	READ_SHORT	0x70	glob_fx			// Number of Global Effects
	SET	glob_add = 0

	INSERT_BYTES (fx_off) 0x30
	  WRITE_SHORT (fx_off) 171			// Give innate
	  WRITE_BYTE (fx_off + 0x2) 1			// Target Self
	  WRITE_BYTE (fx_off + 0x3) 1			// power
	  WRITE_LONG (fx_off + 0x8) 0			// Wizard
	  WRITE_LONG (fx_off + 0xc) 9			// perm
	  WRITE_BYTE (fx_off + 0x12) 100		// Probability 1
	  WRITE_ASCIIE (fx_off + 0x14) 	"%spell_name%"  // resource
	++glob_add

        INSERT_BYTES (fx_off) 0x30
	  WRITE_SHORT (fx_off) 172			// Remove spell
	  WRITE_BYTE (fx_off + 0x2) 1			// Target Self
	  WRITE_BYTE (fx_off + 0x3) 1			// power
	  WRITE_LONG (fx_off + 0x8) 0			// Wizard
	  WRITE_LONG (fx_off + 0xc) 9			// perm
	  WRITE_BYTE (fx_off + 0x12) 100		// Probability 1
	  WRITE_ASCIIE (fx_off + 0x14) "%spell_name%"	// resource
	++glob_add

//	INSERT_BYTES (fx_off) 0x30			//Second effect
//	  WRITE_etc...
//	++glob_add

	glob_fx += glob_add
	WRITE_SHORT 0x70 glob_fx			// Increment Number of Global Effects
	FOR (i = 0; i < ab_num; ++i) BEGIN		// Offset Effect Index for all Abilities
	  READ_SHORT (ab_off + i * 0x28 + 0x20) fx_idx
	  WRITE_SHORT (ab_off + i * 0x28 + 0x20) (fx_idx + glob_add)
	END
     END
     END ELSE //end of infinite casting without specification
     BEGIN
	PATCH_IF (~%SOURCE_SIZE%~ > ~0x71~) BEGIN
        READ_LONG 	0x64	ab_off			// Abilities Offset
	READ_SHORT	0x68	ab_num			// Number of Abilities
	READ_SHORT	0x6a	fx_off			// Effects Offset
	READ_SHORT	0x70	glob_fx			// Number of Global Effects
	SET	glob_add = 0

	INSERT_BYTES (fx_off) 0x30
	  WRITE_SHORT (fx_off) 171			// Give innate
	  WRITE_BYTE (fx_off + 0x2) 1			// Target Self
	  WRITE_BYTE (fx_off + 0x3) 1			// power
	  WRITE_LONG (fx_off + 0x8) 0			// Wizard
	  WRITE_LONG (fx_off + 0xc) 9			// perm
	  WRITE_BYTE (fx_off + 0x12) 100		// Probability 1
	  WRITE_ASCIIE (fx_off + 0x14) "%SOURCE_RES%"	// resource
	++glob_add

        INSERT_BYTES (fx_off) 0x30
	  WRITE_SHORT (fx_off) 172			// Remove spell
	  WRITE_BYTE (fx_off + 0x2) 1			// Target Self
	  WRITE_BYTE (fx_off + 0x3) 1			// power
	  WRITE_LONG (fx_off + 0x8) 0			// Wizard
	  WRITE_LONG (fx_off + 0xc) 9			// perm
	  WRITE_BYTE (fx_off + 0x12) 100		// Probability 1
	  WRITE_ASCIIE (fx_off + 0x14) "%SOURCE_RES%"	// resource
	++glob_add

//	INSERT_BYTES (fx_off) 0x30			//Second effect
//	  WRITE_etc...
//	++glob_add

	glob_fx += glob_add
	WRITE_SHORT 0x70 glob_fx			// Increment Number of Global Effects
	FOR (i = 0; i < ab_num; ++i) BEGIN		// Offset Effect Index for all Abilities
	  READ_SHORT (ab_off + i * 0x28 + 0x20) fx_idx
	  WRITE_SHORT (ab_off + i * 0x28 + 0x20) (fx_idx + glob_add)
	END
      END
     END

  READ_LONG 0x50 "valid"
  PATCH_IF ("%level_text%" STRING_COMPARE_CASE "SAME" != 0) BEGIN
  PATCH_IF (%valid% >= 0) BEGIN // verify desc is valid
  READ_STRREF 0x50 ~desc~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~Level: Cantrip~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: Orison~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 1~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 2~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 3~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 4~ ~Level: %level_text%~        //replacing old with new
	REPLACE_TEXTUALLY ~Level: 5~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 6~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 7~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 8~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 9~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: 10~ ~Level: %level_text%~        //replacing old with new 
	REPLACE_TEXTUALLY ~Level: Quest~ ~Level: %level_text%~        //replacing old with new
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
  END  //
  END

END //end type 1

END
